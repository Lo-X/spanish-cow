security:
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    encoders:
        App\Entity\User:
            algorithm: bcrypt


    providers:
        db_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            form_login:
                check_path:               /api/login_check
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure
                require_previous_session: false

        api:
            pattern:   ^/api/
            stateless: true
            anonymous: true
            guard:
               authenticators:
                   - lexik_jwt_authentication.jwt_token_authenticator

        main:
            anonymous: ~
            form_login:
                login_path: login
                check_path: login
                default_target_path: project_list
            logout:
                path: /logout
                target: login

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login,   roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api$,   roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/,      roles: [ ROLE_USER ] }
